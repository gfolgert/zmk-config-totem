//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi> 
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define MAIN 0
#define NUMPAD 1
#define MEDIA 2
#define ARROWS 3
#define FKEYS 4
#define ALTTAB 6
#define LEFTARROWS 7

/*
     |  0 |  1 |  2 |  3 |  4 |    |  5 |  6 |  7 |  8 |  9 |
     | 10 | 11 | 12 | 13 | 14 |    | 15 | 16 | 17 | 18 | 19 |
| 20 | 21 | 22 | 23 | 24 | 25 |    | 26 | 27 | 28 | 29 | 30 | 31 | 
     |    |    | 32 | 33 | 34 |    | 35 | 36 | 37 |    |    | 
                                                                  */

#define U_MOUSE_SCROLL_MAX 10                    /* <--- New max speed setting (default: 10,  miryoku: 100) */

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

&mwh {
  time-to-max-speed-ms = <0>;                 /* <--- How long time until max speed is reached (default: ?,  miryoku: 5000) */
};


#define U_MOUSE_SCROLL_EXPONENT 2

/* miryoku defaults
#define U_MOUSE_MOVE_EXPONENT 1
#define U_MOUSE_MOVE_DELAY 0
#define U_MOUSE_SCROLL_EXPONENT 1
#define U_MOUSE_SCROLL_DELAY 0
				*/

/ {
    combos {
        compatible = "zmk,combos";

        //Modifiers – Corner Keys
        combo_topq {
            timeout-ms = <25>;
            key-positions = <1 2>;
            layers = <0>;
            bindings = <&kp Q>;
        };
        combo_guiq {
            timeout-ms = <25>;
            key-positions = <1 2>;
            layers = <1>;
            bindings = <&kp LG(Q)>;
        };        
	combo_x {
            timeout-ms = <25>;
            key-positions = <23 24>;
            layers = <0>;
            bindings = <&kp X>;
        };
        combo_guix {
            timeout-ms = <25>;
            key-positions = <23 24>;
            layers = <1>;
            bindings = <&kp LG(X)>;
        };

        //Modifiers – Left Hand
        combo_lgui {
            timeout-ms = <25>;
            key-positions = <3 13>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp LGUI>;
        };
        combo_lalt {
            timeout-ms = <25>;
            key-positions = <2 12>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp LALT>;
        };
        combo_lctl {
            timeout-ms = <25>;
            key-positions = <1 11>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp LCTRL>;
        };
        combo_lctlalt {
            timeout-ms = <25>;
            key-positions = <1 11 2 12>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp LC(LALT)>;
        };
        combo_lctlgui {
            timeout-ms = <25>;
            key-positions = <1 11 3 13>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp LC(LGUI)>;
        };
        combo_laltgui {
            timeout-ms = <25>;
            key-positions = <2 12 3 13>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp LA(LGUI)>;
        };

        //Modifiers – Right Hand
        combo_rgui {
            timeout-ms = <25>;
            key-positions = <6 16>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp LGUI>;
        };
        combo_ralt {
            timeout-ms = <25>;
            key-positions = <7 17>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp RALT>;
        };
        combo_rctl {
            timeout-ms = <25>;
            key-positions = <8 18>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp RCTRL>;
        }; 
        combo_rctlralt {
            timeout-ms = <25>;
            key-positions = <8 18 7 17>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp RC(RALT)>;
        };
        combo_rctrgui {
            timeout-ms = <25>;
            key-positions = <8 18 6 16>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp RC(RGUI)>;
        };
        combo_raltrgui {
            timeout-ms = <25>;
            key-positions = <7 17 6 16>;
            layers = <0 1 2 3 4 5>;
            bindings = <&kp RA(RGUI)>;
        };
     
   
        //Symbols
        combo_quote {
            timeout-ms = <25>;
            key-positions = <28 29>;
	    layers = <0 1 2 4>;
            bindings = <&kp SQT>;
        };
        combo_quote2 {
            timeout-ms = <25>;
            key-positions = <7 8>;
	    layers = <0 1 2 4>;
            bindings = <&kp SQT>;
        };
        combo_semicolon {
            timeout-ms = <25>;
            key-positions = <17 29>;
	    layers = <0 1 2 4>;
            bindings = <&kp SEMI>;
        };
        combo_altminus {
            timeout-ms = <25>;
            key-positions = <16 17>;
	    layers = <1 2 4>;
            bindings = <&kp LA(MINUS)>;
        };
        combo_altshiftminus {
            timeout-ms = <25>;
            key-positions = <16 17 18>;
	    layers = <1 2 4>;
            bindings = <&kp LA(LS(MINUS))>;
        };
        combo_plus {
            timeout-ms = <25>;
            key-positions = <16 18>;
	    layers = <1 2 4>;
            bindings = <&kp PLUS>;
        };
        combo_grave {
            timeout-ms = <25>;
            key-positions = <7 18>;
	    layers = <1 2 4>;
            bindings = <&kp GRAVE>;
        };
        combo_slash {
            timeout-ms = <25>;
            key-positions = <17 18 27>;
            layers = <0 1 2 4>;
            bindings = <&kp SLASH>;
        };
        combo_backslash {
            timeout-ms = <25>;
            key-positions = <16 28 29>;
            layers = <0 1 2 4>;
            bindings = <&kp BACKSLASH>;
        };
        combo_caret {
            timeout-ms = <25>;
            key-positions = <7 16 18>;
            layers = <0 1 2 4>;
            bindings = <&kp CARET>;
        }; 
        combo_percentsign {
            timeout-ms = <25>;
            key-positions = <18 28>;
            layers = <0 1 2 4>;
            bindings = <&kp PERCENT>;
        };
        combo_questionmark {
            timeout-ms = <25>;
            key-positions = <16 28>;
            layers = <0 1 2 4>;
            bindings = <&kp QUESTION>;
        };
        combo_exclamationmark {
            timeout-ms = <25>;
            key-positions = <16 29>;
            layers = <0 1 2 4>;
            bindings = <&kp EXCLAMATION>;
        };
        combo_dollarsign {
            timeout-ms = <25>;
            key-positions = <7 18 27>;
            layers = <0 1 2 4>;
            bindings = <&kp DOLLAR>;
        };
        combo_atsign {
            timeout-ms = <25>;
            key-positions = <6 17 18>;
            layers = <0 1 2 4>;
            bindings = <&kp AT_SIGN>;
        };

//Parenthesis
        combo_lpar {
            timeout-ms = <25>;
            key-positions = <27 28>;
            layers = <0 1 2 4>;
            bindings = <&kp LPAR>;
        };
        combo_rpar {
            timeout-ms = <25>;
            key-positions = <27 29>;
            layers = <0 1 2 4>;
            bindings = <&kp RPAR>;
        };
        combo_lbkt {
            timeout-ms = <25>;
            key-positions = <19 27 28>;
            layers = <0 1 2 4>;
            bindings = <&kp LBKT>;
        };
        combo_rbkt {
            timeout-ms = <25>;
            key-positions = <19 27 29>;
            layers = <0 1 2 4>;
            bindings = <&kp RBKT>;
        };

        
        //Left Hand
        combo_enter_left {
            timeout-ms = <25>;
            key-positions = <22 23 24>;
            layers = <0 1>;
            bindings = <&kp ENTER>;
        };
        combo_tab_left {
            timeout-ms = <25>;
            key-positions = <11 12 13>;
            layers = <0 1 2 4>;
            bindings = <&kp LS(TAB)>;
        };
        combo_escape_left {
            timeout-ms = <25>;
            key-positions = <1 2 3>;
            layers = <0 1 2 4>;
            bindings = <&kp ESC>;
        };
        combo_space {
            timeout-ms = <25>;
            key-positions = <22 24>;
            layers = <1 2 4>;
            bindings = <&kp SPACE>;
        };
        combo_backspace_left {
            timeout-ms = <25>;
            key-positions = <22 23>;
            layers = <1 2 4>;
            bindings = <&kp BSPC>;
        };
        combo_equal_left {
            timeout-ms = <25>;
            key-positions = <2 3>;
            layers = <1 2 4>;
            bindings = <&kp EQUAL>;
        };
        combo_minus_left {
            timeout-ms = <25>;
            key-positions = <12 13>;
            layers = <1>;
            bindings = <&kp MINUS>;
        };      
        combo_pgup {
            timeout-ms = <25>;
            key-positions = <5 6>;
            layers = <1 2 4>;
            bindings = <&kp PG_UP>;
        };
        combo_pgdn {
            timeout-ms = <25>;
            key-positions = <15 16>;
            layers = <1 2 4>;
            bindings = <&kp PG_DN>;
        };  

        //Media
        combo_next {
            timeout-ms = <25>;
            key-positions = <5 6>;
            layers = <2>;
            bindings = <&kp C_NEXT>;
        };
        combo_previous {
            timeout-ms = <25>;
            key-positions = <15 16>;
            layers = <2>;
            bindings = <&kp C_PREV>;
        };
        combo_mute {
            timeout-ms = <25>;
            key-positions = <25 26>;
            layers = <2>;
            bindings = <&kp C_MUTE>;
        };
        

        //Misc
        combo_gfemail {
            timeout-ms = <25>;
            key-positions = <13 6 18>;
            layers = <1 2>;
            bindings = <&gfemail>;
        };
        combo_handle {
            timeout-ms = <25>;
            key-positions = <13 6 17>;
            layers = <1 2>;
            bindings = <&gfhandle>;
        };
        combo_phonenum {
            timeout-ms = <25>;
            key-positions = <13 6 8>;
            layers = <1 2>;
            bindings = <&phonenum>;
        };
        combo_name {
            timeout-ms = <25>;
            key-positions = <13 27 17>;
            layers = <1 2>;
            bindings = <&gfname>;
        };
        combo_thumbsup {
            timeout-ms = <25>;
            key-positions = <18 27>;
            layers = <1 2>;
            bindings = <&thumbsup>;
	};
        combo_altbackspace2 {
            timeout-ms = <25>;
            key-positions = <27 28>;
	    layers = <3>;
            bindings = <&kp LA(BSPC)>;
        };
        combo_altdel {
            timeout-ms = <25>;
            key-positions = <28 29>;
	    layers = <3>;
            bindings = <&kp LA(DEL)>;
        };

	//Left Combos
        combo_screenshot_file {
            timeout-ms = <25>;
            key-positions = <1 2 24>;
            layers = <0 1>;
            bindings = <&kp LG(LS(N4))>;
        };
        combo_screenshot_clipboard {
            timeout-ms = <25>;
            key-positions = <2 11 24>;
            layers = <0 1>;
            bindings = <&kp LG(LS(LC(N4)))>;
        };
        combo_controlup {
            timeout-ms = <25>;
            key-positions = <2 11 13>;
            layers = <0 1>;
            bindings = <&kp LC(UP)>;
        };
        combo_guik {
            timeout-ms = <25>;
            key-positions = <11 24>;
            layers = <1>;
            bindings = <&kp LG(K)>;
        };
        combo_alt_backspace_left {
            timeout-ms = <25>;
            key-positions = <11 13>;
            layers = <1>;
            bindings = <&kp LA(BSPC)>;
        };
        combo_l {
            timeout-ms = <25>;
            key-positions = <3 14>;
            layers = <1>;
            bindings = <&kp L>;
        };
        combo_bootloaderleft {
            timeout-ms = <25>;
            key-positions = <1 3 22 24>;
            layers = <1>;
            bindings = <&bootloader>;
        };
        combo_bootloaderright {
            timeout-ms = <25>;
            key-positions = <6 8 27 29>;
            layers = <1>;
            bindings = <&bootloader>;
        };

    };
};


/ {
    macros {
    
        gfemail: gfemail {
            label = "gfemail";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 1>
                , <&macro_tap &kp G &kp F &kp O &kp L &kp G &kp E &kp R &kp T &kp AT_SIGN &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>
                ;
        };

        gfhandle: gfhandle {
            label = "gfhandle";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 1>
                , <&macro_tap &kp G &kp F &kp O &kp L &kp G &kp E &kp R &kp T>
                ;
        };
    
        phonenum: phonenum {
            label = "phonenum";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 1>
                , <&macro_tap &kp N6 &kp N0 &kp N8 &kp N3 &kp N0 &kp N1 &kp N5 &kp N4 &kp N2 &kp N8>
                ;
        };

        gfname: gfname {
            label = "gfname";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 1>
                , <&macro_tap &kp LS(G) &kp A &kp V &kp I &kp N &kp SPACE &kp LS(F) &kp O &kp L &kp G &kp E &kp R &kp T>
                ;
        };

        thumbsup: thumbsup {
            label = "thumbsup";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 1>
                , <&macro_tap &kp COLON &kp T &kp H &kp U &kp M &kp B &kp S &kp U &kp P &kp COLON>
                ;
        };

        alttab: alt_tab_enter {
            label = "alt_tab_enter";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <10>;
	    tap-ms = <20>;
	    bindings =
		<&macro_press &kp LGUI>,
		<&macro_tap &kp TAB &to ALTTAB>;
        };

        ctrltab: ctrl_tab_enter {
            label = "ctrl_tab_enter";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <10>;
	    tap-ms = <20>;
	    bindings =
		<&macro_press &kp LCTRL>,
		<&macro_tap &kp TAB &to ALTTAB>;
        };

        // macro to activate layer 1, then release alt and move to layer 0 on key release
        mo_at: momentary_release_alt {
	   compatible = "zmk,behavior-macro";
	   label = "momentary_release_alt";
	   #binding-cells = <0>;
	   wait-ms = <0>;
	   tap-ms = <0>;
	   bindings = <&macro_press &mo 3>
		 , <&macro_pause_for_release>
		 , <&macro_release &kp LGUI>
		 , <&macro_tap &to 0>;
       };

        mo_ct: momentary_release_ctrl {
	   compatible = "zmk,behavior-macro";
	   label = "momentary_release_ctrl";
	   #binding-cells = <0>;
	   wait-ms = <0>;
	   tap-ms = <0>;
	   bindings = <&macro_press &mo 2>
		 , <&macro_pause_for_release>
		 , <&macro_release &kp LCTRL>
		 , <&macro_tap &to 0>;
       };
	
    };
};

/ {
    behaviors {
	    lta: layer_tap_release_alttab {
	        compatible = "zmk,behavior-hold-tap";
	        label = "layer_tap_release_alttab";
	        #binding-cells = <2>;
	        flavor = "tap-preferred";
	        tapping-term-ms = <200>;
	        bindings = <&mo_at>, <&kp>;
	    };

	    ltc: layer_tap_release_ctrltab {
	        compatible = "zmk,behavior-hold-tap";
	        label = "layer_tap_release_ctrltab";
	        #binding-cells = <2>;
	        flavor = "tap-preferred";
	        tapping-term-ms = <200>;
	        bindings = <&mo_ct>, <&kp>;
	    };


    };
};


/ {
    keymap {
        compatible = "zmk,keymap";
        label ="Default keymap";

        main_layer {
            bindings = <
                &none  &kp W  &kp F  &kp P  &kp B                           &kp J  &kp L  &kp U      &kp Y    &none
                &kp A  &kp R  &kp S  &kp T  &kp G                           &kp M  &kp N  &kp E      &kp I    &kp O
         &none  &none  &kp Z  &kp C  &kp D  &kp V                           &kp K  &kp H  &kp COMMA  &kp DOT  &none  &none
                                     &none  &mo 1  &kp LSHFT  &ltc 2 BSPC  &lta 3 SPACE  &none
            >;
        };
        
        numpad_layer {
            bindings = <
                &none        &kp LG(W)  &kp LG(F)  &kp LG(P)  &kp LG(B)                  &none  &kp N7  &kp N8  &kp N9  &none 
                &lt 7 LG(A)  &kp LG(R)  &kp LG(S)  &kp LG(T)  &kp LG(G)                  &none  &kp N4  &kp N5  &kp N6  &kp DOT
         &none  &none        &kp LG(Z)  &kp LG(C)  &kp LG(D)  &kp LG(V)                  &none  &kp N1  &kp N2  &kp N3  &none    &none
                                                 &none      &trans     &trans  &trans  &lt 4 N0    &none
            >;
        };
        
        media_layer {
            bindings = <
                &none  &none  &none  &none  &none                 &kp C_VOL_UP  &kp EQUAL    &kp ESC    &kp ASTERISK   &none 
                &none  &none  &none  &none  &none                 &kp C_VOL_DN  &kp MINUS    &kp ENTER  &kp AMPERSAND  &thumbsup 
         &none  &none  &none  &none  &none  &none                 &kp C_PP      &kp LS(TAB)  &kp TAB    &kp HASH       &none      &none
                                     &none  &none  &trans  &none  &mo 5         &none
            >;
        };

        arrows_layer {
            bindings = <
                &none  &none  &none  &none  &none                 &mwh SCROLL_UP    &kp HOME      &kp UP         &kp END    &none 
                &none  &none  &none  &none  &none                 &mwh SCROLL_DOWN  &kp LEFT      &kp DOWN       &kp RIGHT  &kp DEL
         &none  &none  &none  &none  &none  &none                 &kp SPACE              &kp LA(LEFT)  &kp LA(RIGHT)  &kp CAPS   &none   &none  
                                     &none  &none  &trans  &mo 5  &none  &none
            >;
        };
        
        fnkeys_layer {
            bindings = <
                &none  &none  &none  &none  &none                 &kp F12  &kp F7  &kp F8  &kp F9  &none
                &none  &none  &none  &none  &none                 &kp F11  &kp F4  &kp F5  &kp F6  &none
         &none  &none  &none  &none  &none  &none                 &kp F10  &kp F1  &kp F2  &kp F3  &none   &none
                                     &none  &none  &trans  &none  &none  &none
            >;
        };

	alttab_layer {
            bindings = <
                &none  &none  &none  &none  &none                 &none  &none    &none    &none  &none
                &none  &none  &none  &none  &none                 &none  &none    &none    &none  &none
                &none  &none  &none  &none  &none                 &none  &kp TAB  &kp TAB  &none  &none 
                                     &none  &none  &trans  &none  &none  &none
            >;
        };

	leftarrows_layer {
            bindings = <
                &none  &kp HOME  &kp UP    &kp END    &none                 &none  &none    &none    &none  &none
                &none  &kp LEFT  &kp DOWN  &kp RIGHT  &none                 &none  &none    &none    &none  &none
                &none  &none     &none     &none      &none                 &none  &none    &none    &none  &none
                                           &none      &none  &trans  &none  &none  &none
            >;
        };
               
    };
};
